
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON DIVIDE DQM EQ ID IMPLY LBPAREN LET LMPAREN LPAREN MINUS NUMBER PLUS RBPAREN RMPAREN RPAREN SEMICOLON SENDTO TIMES begin const do end endfor endruleset endstartstate enum for invariant rule ruleset startstate type varexpression :  const ID  COLON NUMBER SEMICOLONexpression :  type ID  COLON enum LBPAREN ID RBPAREN SEMICOLONexpression : NUMBERexpression : IDstatement : ID EQ NUMBER SEMICOLONstatement : expression'
    
_lr_action_items = {'const':([0,],[2,]),'type':([0,],[5,]),'NUMBER':([0,8,],[4,10,]),'ID':([0,2,5,13,],[3,6,7,14,]),'$end':([1,3,4,12,16,],[0,-4,-3,-1,-2,]),'COLON':([6,7,],[8,9,]),'enum':([9,],[11,]),'SEMICOLON':([10,15,],[12,16,]),'LBPAREN':([11,],[13,]),'RBPAREN':([14,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> const ID COLON NUMBER SEMICOLON','expression',5,'p_const_type','ocamlyacc.py',12),
  ('expression -> type ID COLON enum LBPAREN ID RBPAREN SEMICOLON','expression',8,'p_const_var','ocamlyacc.py',17),
  ('expression -> NUMBER','expression',1,'p_expression_term','ocamlyacc.py',22),
  ('expression -> ID','expression',1,'p_expression_id','ocamlyacc.py',27),
  ('statement -> ID EQ NUMBER SEMICOLON','statement',4,'p_statement_assign','ocamlyacc.py',32),
  ('statement -> expression','statement',1,'p_statement_expr','ocamlyacc.py',36),
]
